def currentModule = rootProject.modules.main
if (currentModule.isStandalone) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

android {
    def versions = rootProject.ext.versions
    compileSdkVersion versions.compileSdkVersion



    defaultConfig {
        if (currentModule.isStandalone) {
            // 当前组件独立运行，需要设置applicationId
            applicationId currentModule.applicationId
        }
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion
        versionCode versions.versionCode
        versionName versions.versionName

        def moduleName = project.getName()
        // 业务组件资源前缀，避免冲突
        resourcePrefix "${moduleName}_"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        // ARouter处理器所需参数
                        moduleName: moduleName,
                        // XModulable处理器所需参数
                        XModule   : moduleName
                ]
            }
        }

    }

    /**
     * 签名配置
     */
    signingConfigs {
        def signInfo = rootProject.ext.signInfo
        def releaseSignInfo = signInfo.release
        def debugSignInfo = signInfo.debug

        release {
            storeFile file(releaseSignInfo.storeFilePath)
            storePassword releaseSignInfo.storePassword
            keyAlias releaseSignInfo.keyAlias
            keyPassword releaseSignInfo.keyPassword
        }
        debug {
            storeFile file(debugSignInfo.storeFilePath)
            storePassword debugSignInfo.storePassword
            keyAlias debugSignInfo.keyAlias
            keyPassword debugSignInfo.keyPassword
        }
    }

    buildTypes {
        release {
            // 签名
            signingConfig signingConfigs.release
            // 组件若独立运行，则开启混淆；否则关闭，避免多次混淆
            minifyEnabled currentModule.isStandalone
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro',
                    '../common/proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.debug
        }
        staging {
            signingConfig signingConfigs.debug
            debuggable true
            minifyEnabled currentModule.isStandalone
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro',
                    '../common/proguard-rules.pro'

            // 按顺序查找依赖module的build type（命中就停止查找），然后进行对应build type的依赖
            matchingFallbacks = ['debug', 'staging', 'release']
        }
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/LICENSE.txt'
    }

    sourceSets {
        main {
            if (currentModule.isStandalone) {
                manifest.srcFile 'src/standalone/AndroidManifest.xml'
                java.srcDirs = ['src/main/java/', 'src/standalone/java/']
                res.srcDirs = ['src/main/res', 'src/standalone/res']
            }
        }
    }
}

dependencies {
    def dependencies = rootProject.ext.dependencies

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation dependencies.support.appcompat
    implementation dependencies.support.design

    annotationProcessor dependencies.arouter.annotationProcessor
    annotationProcessor project(':XModulable-compiler')

    api project(':common')
}
